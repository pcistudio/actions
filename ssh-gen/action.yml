name: 'SSH Key Generation'
description: 'This action help to automatically generate the ssh keys, store the private key in a secret and the public is set in the deploy keys of the repository.'
inputs:
  ssh-key-name:
    description: >
      The name of the secret that will have the ssh key.
    default: "SSH_PRIVATE_KEY"
  repo:
    description: 'The repository were you want to create the secret.'
    default: ${{ github.repository }}
  user-email:
    description: 'The email of the user that will be used to generate the ssh key'
    required: true
  token:
    description: >
      The token use to store the key in the secrets
    required: true
outputs:
  ssh-key:
    description: 'ssh key generated'
    value: ${{ steps.ssh_gen.outputs.ssh_key }}
  test-data:
    description: 'test'
    value: ${{ steps.ssh-gen.outputs.test }}
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        repository: pcistudio/actions
        ref: v1
        path: ./pcistudio_actions
    - id: ssh_gen
      shell: bash
      run: |
        set -e
        set -x

        #[ -z "SSH_KEY" ] && echo "SSH_KEY is not set" && exit 1
        echo "test=data365" >> $GITHUB_OUTPUT
        KEY_PATH="$HOME/.ssh/id_ed25519"
        PUB_KEY_PATH="${KEY_PATH}.pub"

        gh secret list --repo "${REPO}" | grep "${SSH_KEY_NAME}" > /dev/null && echo "SSH key already exists" && exit 0

        echo "Creating SSH key for ${REPO}"
        mkdir -p ~/.ssh
        ssh-keygen -t ed25519 -f "${KEY_PATH}" -N "" -C "${RELEASE_EMAIL}" > /dev/null

        SSH_PRIV=$(cat "${KEY_PATH}");
#        echo "ssh_key=${SSH_PRIV}" >> $GITHUB_OUTPUT
        
        {
        echo 'ssh_key<<EOF'
        cat "${KEY_PATH}"
        echo EOF
        } >> "$GITHUB_OUTPUT"

        gh secret set "${SSH_KEY_NAME}" --body "${SSH_PRIV}" --repo "${REPO}"
        echo "SSH key added to GitHub secret ${SSH_KEY_NAME}"

        gh repo deploy-key add "${PUB_KEY_PATH}" --title "release" --repo "${REPO}"
        echo "SSH key added to GitHub deploy keys"
        # Clean up
        rm -f "${KEY_PATH}" "${PUB_KEY_PATH}"
        echo "SSH key removed from local storage"
#        echo "test=data360" >> $GITHUB_OUTPUT
      env:
        SSH_KEY_NAME: ${{ inputs.ssh-key-name }}
        RELEASE_EMAIL: ${{ inputs.user-email }}
        REPO: ${{ inputs.repo }}
        GH_TOKEN: ${{ inputs.token }}
        GITHUB_OUTPUT: $GITHUB_OUTPUT
#        SSH_KEY: ${{ secrets.${{ inputs.ssh-key-name }} }}
    - name: "Test"
      shell: bash
      run: |
        echo "The modified secret is: ${{ steps.ssh_gen.outputs.test }}"
        [ -z ${{ steps.ssh_gen.outputs.ssh_key }} ] && echo "No Key" || echo "KEY present";
        

