name: 'Maven release'
description: 'This action help to automatically configure the ssh keys in the `.ssh` folder, so you can use it in your scripts.'
inputs:
  ssh-key:
    description: >
      SSH key used to operate over the repository. The SSH key is configured with the local
      git config, which enables your scripts to run authenticated git commands.
    required: true
  ssh-key-name:
    description: >
      The name of the secret that will have the ssh key.
    default: "SSH_PRIVATE_KEY_TEMP"
  user-name:
    description: >
      The user that will be used to create the release.
    default: "release-bot"
  user-email:
    description: >
      The email that will be used to create the release.
    required: true
  token:
    description: >
      The Personal access token (PAT) of the user that will be used to configure the ssh key.
    required: true
  maven-central-username:
    description: >
      The username of the user that will be used to deploy to maven central.
    required: true
  maven-central-password:
    description: >
      The password of the user that will be used to deploy to maven central.
    required: true
  gpg-passphrase:
    description: >
      The passphrase of the gpg key that will be used to sign the artifacts.
    required: true
  gpg-private-key:
    description: >
      The private key of the gpg key that will be used to sign the artifacts.
    required: true
  server-id:
    description: >
      The server id of the maven central repository.
    default: "ossrh"
  gh-token:
    description: >
      The default github token use to create the release.
    required: true


#      TODO Add input parameters remember to put everything in the env if it is use in a bash script
runs:
  using: "composite"
  steps:
    - name: Check SSH Key Generation
      uses: pcistudio/actions/ssh-gen@v1
      with:
        ssh-key-name: ${{ inputs.ssh-key-name }}
        user-email: ${{ inputs.user-email }}
        token: ${{ inputs.token }}

    - name: Set up SSH
      uses: pcistudio/actions/ssh-setup@v1
      with:
        ssh-key: "${{ inputs.ssh-key }}"
    - uses: actions/checkout@v4
      with:
        persist-credentials: true
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: ${{ inputs.server-id }}
        server-username: MAVEN_CENTRAL_USERNAME
        server-password: MAVEN_CENTRAL_PASSWORD
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        gpg-private-key: ${{ inputs.gpg-private-key }}
        cache: maven
    - name: Set Git Author
      shell: bash
      run: |
        git config --global user.name "${{ inputs.user-name }}"
        git config --global user.email "${{ inputs.user-email }}"
    - name: Create New Release
      id: create_release
      shell: bash
      run: |
        ./mvnw release:clean release:prepare -Darguments="-DskipTests -Dpmd.skip=true -Dspotbugs.skip=true" -B  -X
        version=$(grep "scm.tag=" release.properties | sed 's/scm.tag=//')
        echo "version=$version" | tee "$GITHUB_OUTPUT"

    - name: Perform Release Deployment to Maven Central
      shell: bash
      run: ./mvnw release:perform -Darguments="-DskipTests -Dpmd.skip=true -Dspotbugs.skip=true" -B -Prelease
      env:
        MAVEN_CENTRAL_USERNAME: ${{ inputs.maven-central-username }}
        MAVEN_CENTRAL_PASSWORD: ${{ inputs.maven-central-password }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.gpg-passphrase }}
    - name: Release from Tag
      shell: bash
      run: gh release create ${{ env.VERSION }} -t "Release ${{ env.VERSION }}" -n "Release ${{ env.VERSION }}" --latest
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
        VERSION: ${{ steps.create_release.outputs.version }}
